// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// update sd function resource by batch, Supports a specified list of functions, or all
	// (POST /batch_update_sd_resource)
	BatchUpdateResource(c *gin.Context)
	// delete sd function
	// (POST /del/sd/functions)
	DelSDFunc(c *gin.Context)
	// image upcaling
	// (POST /extra_images)
	ExtraImages(c *gin.Context)
	// img to img predict
	// (POST /img2img)
	Img2Img(c *gin.Context)
	// get sdapi function
	// (GET /list/sdapi/functions)
	ListSdFunc(c *gin.Context)
	// user login
	// (POST /login)
	Login(c *gin.Context)
	// list model
	// (GET /models)
	ListModels(c *gin.Context)
	// register model
	// (POST /models)
	RegisterModel(c *gin.Context)
	// delete model
	// (DELETE /models/{model_name})
	DeleteModel(c *gin.Context, modelName string)
	// get model info
	// (GET /models/{model_name})
	GetModel(c *gin.Context, modelName string)
	// update model
	// (PUT /models/{model_name})
	UpdateModel(c *gin.Context, modelName string)
	// update config options
	// (POST /options)
	UpdateOptions(c *gin.Context)
	// restart webui api server
	// (POST /restart)
	Restart(c *gin.Context)
	// cancel predict task
	// (POST /tasks/{taskId}/cancellation)
	CancelTask(c *gin.Context, taskId string)
	// get predict progress
	// (GET /tasks/{taskId}/progress)
	GetTaskProgress(c *gin.Context, taskId string)
	// get predict result
	// (GET /tasks/{taskId}/result)
	GetTaskResult(c *gin.Context, taskId string)
	// txt to img predict
	// (POST /txt2img)
	Txt2Img(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BatchUpdateResource operation middleware
func (siw *ServerInterfaceWrapper) BatchUpdateResource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BatchUpdateResource(c)
}

// DelSDFunc operation middleware
func (siw *ServerInterfaceWrapper) DelSDFunc(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DelSDFunc(c)
}

// ExtraImages operation middleware
func (siw *ServerInterfaceWrapper) ExtraImages(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtraImages(c)
}

// Img2Img operation middleware
func (siw *ServerInterfaceWrapper) Img2Img(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Img2Img(c)
}

// ListSdFunc operation middleware
func (siw *ServerInterfaceWrapper) ListSdFunc(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSdFunc(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListModels(c)
}

// RegisterModel operation middleware
func (siw *ServerInterfaceWrapper) RegisterModel(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterModel(c)
}

// DeleteModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "model_name" -------------
	var modelName string

	err = runtime.BindStyledParameterWithOptions("simple", "model_name", c.Param("model_name"), &modelName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteModel(c, modelName)
}

// GetModel operation middleware
func (siw *ServerInterfaceWrapper) GetModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "model_name" -------------
	var modelName string

	err = runtime.BindStyledParameterWithOptions("simple", "model_name", c.Param("model_name"), &modelName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetModel(c, modelName)
}

// UpdateModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "model_name" -------------
	var modelName string

	err = runtime.BindStyledParameterWithOptions("simple", "model_name", c.Param("model_name"), &modelName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter model_name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateModel(c, modelName)
}

// UpdateOptions operation middleware
func (siw *ServerInterfaceWrapper) UpdateOptions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOptions(c)
}

// Restart operation middleware
func (siw *ServerInterfaceWrapper) Restart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Restart(c)
}

// CancelTask operation middleware
func (siw *ServerInterfaceWrapper) CancelTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelTask(c, taskId)
}

// GetTaskProgress operation middleware
func (siw *ServerInterfaceWrapper) GetTaskProgress(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskProgress(c, taskId)
}

// GetTaskResult operation middleware
func (siw *ServerInterfaceWrapper) GetTaskResult(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskResult(c, taskId)
}

// Txt2Img operation middleware
func (siw *ServerInterfaceWrapper) Txt2Img(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Txt2Img(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/batch_update_sd_resource", wrapper.BatchUpdateResource)
	router.POST(options.BaseURL+"/del/sd/functions", wrapper.DelSDFunc)
	router.POST(options.BaseURL+"/extra_images", wrapper.ExtraImages)
	router.POST(options.BaseURL+"/img2img", wrapper.Img2Img)
	router.GET(options.BaseURL+"/list/sdapi/functions", wrapper.ListSdFunc)
	router.POST(options.BaseURL+"/login", wrapper.Login)
	router.GET(options.BaseURL+"/models", wrapper.ListModels)
	router.POST(options.BaseURL+"/models", wrapper.RegisterModel)
	router.DELETE(options.BaseURL+"/models/:model_name", wrapper.DeleteModel)
	router.GET(options.BaseURL+"/models/:model_name", wrapper.GetModel)
	router.PUT(options.BaseURL+"/models/:model_name", wrapper.UpdateModel)
	router.POST(options.BaseURL+"/options", wrapper.UpdateOptions)
	router.POST(options.BaseURL+"/restart", wrapper.Restart)
	router.POST(options.BaseURL+"/tasks/:taskId/cancellation", wrapper.CancelTask)
	router.GET(options.BaseURL+"/tasks/:taskId/progress", wrapper.GetTaskProgress)
	router.GET(options.BaseURL+"/tasks/:taskId/result", wrapper.GetTaskResult)
	router.POST(options.BaseURL+"/txt2img", wrapper.Txt2Img)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hVMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
